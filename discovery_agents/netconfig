#!/bin/sh
#
#	Command to discover our local network configuration and output the results in JSON format.
#	It requires /sys/class/net and the ip command (/sbin/ip).
#	It needs iwconfig (/sbin/iwconfig) on machines with wireless interfaces
#	
#	It gathers a variety of interesting information about our network configuration including interfaces, IP addresses,
#	MAC addresses, carrier state, MTU, speed, wireless protocol support, ESSID, access point, and so on...
#
#	Output validated at jsonlint.com (good to validate future versions there too!)
#
#
# @author &copy; 2012 - Alan Robertson <alanr@unix.sh>
# @n
# Licensed under the GNU General Public License (GPL) version 3 or any later version at your option.
#
#
#	Some sample output is included below.  In the 'data' section, there is a hash table indexed by interface name.
#	The various fields from /sys are name/value pairs under the interface name.
#	The IP addresses are represented by an array named 'ipaddrs'.  Each array element is an object with attributes
#	for the CIDR address, broadcast address, scope and so on.  IPv4 addresses are named 'inet', and IPv6 addresses are named 'inet6'.
#
#
#{
#  "discovertype": "netconfig",
#  "description": "IP Network Configuration",
#  "source": "netconfig",
#  "host": "servidor",
#  "data": {
#    "eth0": {
#	"address": "00:1b:fc:1b:a8:73",
#	"carrier": 1,
#	"duplex": "full",
#	"mtu": 1500,
#	"operstate": "up",
#	"speed": 1000,
#	"default_gw": true,
#	"ipaddrs": {
#		"10.10.10.5/24":	{"brd":"10.10.10.255", "scope":"global", "name":"eth0"}, 
#		"10.10.10.200/24":	{"scope":"global", "name":"eth0:mon"}, 
#		"fe80::21b:fcff:fe1b:a873/64":	{"scope":"link"}
#	}
#    }, 
#    "lo": {
#	"address": "00:00:00:00:00:00",
#	"carrier": 1,
#	"mtu": 16436,
#	"operstate": "unknown",
#	"ipaddrs": {
#		"127.0.0.1/8":	{"scope":"host"}, 
#		"::1/128":	{"scope":"host"}
#	}
#    }
#  }
#}

NETDIR=/sys/class/net
IP=/sbin/ip
IWCONFIG=/sbin/iwconfig
US=`basename $0`

# Return true if the argument is a floating point number
isfloating() {
  # We need BC to do this right - but it might not be installed.
  # Our caller has pre-filtered our arguments to likely be floating point numbers
  # Hope we have BC or that's good enough...
  test -x "$BC" || return 0
  test ! -z "$(echo "scale=10; $1" | "$BC" 2>/dev/null)"
}

# Return true if the argument is a number...
isanumber() {
  case "$1" in
    *.*.*|*[A-Za-z]*|*:*)	return 1;;
    [0-9]*.*[0-9*])		isfloating "$1"; return;;
  esac
  test \( "$1" -le 0 \) -o \( "$1" -ge 0 \) 2>/dev/null
}


# Format a scalar in the proper JSON format according to its type
scalarfmt() {
  case "$1" in
      true|false|null)	printf "$1";	return;;
      # We allow yes or no for true and false respectively
      # because /proc uses that notation in some places.
      yes)		printf 'true';	return;;
      no)		printf 'false';	return;;
  esac
  if
    isanumber "$1"
  then
    printf '%s'		"$1"
  else
    printf '"%s"'	"$1"
  fi
}


# Print out a scalar name/value pair in JSON notation
scalarval() {
  name="$1"
  value="$2"
  printf '"%s": %s' "$field" "$(scalarfmt "$value")"
}

# Print out an array of scalars in JSON notation
arrayval() {
   arraycomma=''
   separator="$1"
   shift
   ret=''
   for value in "$@"
   do
     ret=$(printf '%s%s%s%s' "$ret" "$arraycomma" "$separator" "$(scalarfmt $value)")
     arraycomma=', '
   done
   printf '[ %s ]' "$ret"
}

#
#	Network discovery
#
discover() {
  test ! -d "$NETDIR" -o ! -x "$IP" && return 1

  DEVICES=$(ls "$NETDIR")
  DEFAULTGW=`cat /proc/net/route | cut -c1-14 | grep '^[^	]*	00000000' | cut -f1 | head -1`
  printf '{\n'
  printf '  "discovertype": "netconfig",\n'
  printf '  "description": "IP Network Configuration",\n'
  printf '  "source": "'$US'",\n'
  printf '  "host": "'`uname -n`'",\n'
  printf '  "data": {\n'
  outercomma=''


  for device in $DEVICES
  do
    test ! -d "$NETDIR/$device" && continue
    printf  "$outercomma"
    outercomma=', \n'
    printf "    \"$device\": {\n"
    # 
    # Gather various information concerning this network interface from $NETDIR/$device files
    # 
    for field in address carrier duplex mtu operstate speed
    do
      file="$NETDIR/$device/$field"
      [ ! -f "$file" ] && continue
      value=`cat $file 2>/dev/null`
      [ -z "$value" ] && continue
      # Change carrier from a {0,1} integer to a boolean
      case "$field:$value" in
         'carrier:1')	value=true;;
         'carrier:0')	value=false;;
      esac
      printf '	%s,\n' "$(scalarval "$field" "$value" )"
    done
    case $device in
      $DEFAULTGW) 	printf '	"default_gw": true,\n'
    esac

    # Is this a wireless connection?
    if
      [ -d "$NETDIR/$device/wireless" ]
    then
      #printf '	"is_wireless": true,\n'
        # sample iwconfig output:
        #wlan0     IEEE 802.11abgn  ESSID:"robertsons"  
        #          Mode:Managed  Frequency:2.417 GHz  Access Point: C4:3D:C7:A8:1B:5B   
        #          Bit Rate=1 Mb/s   Tx-Power=15 dBm   
        #          Retry  long limit:7   RTS thr:off   Fragment thr:off
        #          Power Management:off
        #          Link Quality=55/70  Signal level=-55 dBm  
        #          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0
        #          Tx excessive retries:0  Invalid misc:0   Missed beacon:0
      IWCFG="`iwconfig "$device"`"
      printf "$IWCFG" | grep 'ESSID:'        | sed -e 's%^.*ESSID:%	"ESSID": %' -e 's%Nickname%,"&"%' -e 's%" *$%",%' -e 's%off/any%"NONE",%'
      printf "$IWCFG" | grep 'Access Point:' | sed -e 's%^.*Access Point: *%	"AccessPoint": "%' -e 's% *$%",%'
      printf "$IWCFG" | grep 'IEEE 802.11'   | sed -e 's%^.*IEEE %%' -e 's% .*$%%' -e 's%.*%	"WirelessModes": "&",%'
    fi

    # Is it a bonded link?
    if
      [ -d "$NETDIR/$device/bonding" ]
    then
      # Array fields
      for field in slaves
      do
        if 
          [ -f "$NETDIR/$device/bonding/$field" ]
        then
          value=$(cat "$NETDIR/$device/bonding/$field")
          printf '\t"%s": %s,\n' "bonding_$field" "$(arrayval "" $value)"
        fi 
      done
      # Scalar fields
      for field in mode
      do
        if 
          [ -f "$NETDIR/$device/bonding/$field" ]
        then
          value=$(cat "$NETDIR/$device/bonding/$field" )
          printf '	"%s": %s,\n' "bonding_$field" "$(scalarfmt "$value")"
        fi 
      done
    fi
    #
    # Get IP address information for this device/interface using 'ip addr show $device'
    # Typical output looks like this:
    #2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    #    link/ether 00:1b:fc:1b:a8:73 brd ff:ff:ff:ff:ff:ff
    #    inet 10.10.10.5/24 brd 10.10.10.255 scope global eth0
    #    inet6 fe80::21b:fcff:fe1b:a873/64 scope link 
    #       valid_lft forever preferred_lft forever

    # We are currently only interested in the lines that start with 'inet'

    printf '	"ipaddrs": {'
    innercomma=''
    #
    $IP addr show "$device" | grep '^ *inet' |
    while
      #    inet6 fe80::21b:fcff:fe1b:a873/64 scope link 
      #    inet  10.10.10.5/24               brd   10.10.10.255  scope      global  eth0
      #    inet  10.10.10.21/32              brd   10.10.10.149  scope      global  eth0:home
      #    inet 192.168.128.209              peer  192.168.128.210/32 scope global tun
      read inet  addr                        brd   baddr         scopeword  scope   stuff
    do
      : WE FOUND inet [$inet] addr [$addr] brd [$brd] baddr [$baddr] scopeword [$scopeword] scope [$scope] stuff [$stuff]
      # Semi-Crufty code to deal with a few variations in output (as shown above)
      # It might be less crufty to make them arguments and use shift and so on to parse them...
      case $inet in
        inet*)	
                  printf "$innercomma\n\t\t"
                  innercomma=', '
  		  printf "\"$addr\":\t{" 
                  case $brd in
                    *brd*|peer|scope) printf "\"$brd\":\"$baddr\"";;
                  esac
                  case $scopeword in
                    scope) printf ", \"scope\":\"$scope\"";;
                  esac
                case $scope in
                  $device|$device:*)	printf ", \"name\":\"$scope\"";;
                esac
                case $stuff in
                  $device|$device:*)	printf ", \"name\":\"$stuff\"";;
                esac
                case $scopeword in
                  $device|$device:*)	printf ", \"name\":\"$scopeword\"";;
                esac
                printf '}'
  		;;
      esac
    done
    printf '\n\t}\n'
    printf '    }'
  done
  printf '\n  }\n'
  printf '}\n'
}

#
#	Need to think about standardizing arguments and commands given to discovery
#	modules and standardize them.  That means some things will likely change as
#	I get smart enough to see what I should have done in the first place.
#
discover
