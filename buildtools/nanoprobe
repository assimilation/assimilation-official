#!/bin/sh
### BEGIN INIT INFO
# Provides: assimilation-nanoprobe
# Required-Start: $local_fs $remote_fs $network
# Required-Stop: $local_fs $remote_fs $network
# Should-Start: assimilation-cma
# Should-Stop: assimilation-cma
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop the Assimilation Monitoring System nanoprobe (distributed agent)
# Description: The Assimilation Monitoring System provides highly-scalable, fully-distributed,
#              discovery-driven monitoring.  Or maybe it's monitoring-driven discovery ;-)
#              http://assimmon.org/
#              If a nanoprobe is run on the same system as the CMA (a recommended practice),
#              it must start after the CMA.
### END INIT INFO
#
# This file is part of the Assimilation Project.
#
# @author Copyright &copy; 2013 - Alan Robertson <alanr@unix.sh>
# @n
#  The Assimilation software is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  The Assimilation software is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with the Assimilation Project software.  If not, see http://www.gnu.org/licenses/
#

NANOPROBE=/usr/sbin/nanoprobe
SERVICE=$(basename $NANOPROBE)
NANOARGS=""
#           Ubuntu        Red Hat/SuSE
for dir in /etc/default  /etc/sysconfig
do
    file="$dir/$SERVICE"
    if
        [ -f "$file" -a -r "$file" ]
    then
        . "$file"
        break
    fi
done

#   Where to find the CMA?  It defaults to our reserved multicast address
#   format is an IP:port combination - ipv4 or ipv6 format
case "${NANOPROBE_CMAADDR}" in
    ?*) NANOARGS="$NANOARGS --cmaaddr $NANOPROBE_CMAADDR";;
esac
#   Multicast TTL if we're using our reserved multicast address...
#   TTL must be between 1 and 31 inclusive.
case "${NANOPROBE_TTL}" in
    ?*) NANOARGS="$NANOARGS --ttl ${NANOPROBE_TTL}";;
esac
#   What address should we bind to locally?
#   format is an IP:port combination - IPv4 or IPv6 format
#   IPv6 format looks like "[v6address]:portnumber" (as it should)
case "${NANOPROBE_BIND}" in
    ?*) NANOARGS="$NANOARGS --bind $NANOPROBE_BIND";;
esac
#   If NANOPROBE_DYNAMIC is set to yes or similar then bind to an ephemeral port.
#   This must typically be done for the machine the CMA is running on.
#   The alternative is to specify a specific non-conflicting BIND address,
#   or to ensure the nanoprobe starts after the CMA - in which case this
#   happens automagically...
case "${NANOPROBE_DYNAMIC}" in
    y*|Y*|t*|T*|1) NANOARGS="$NANOARGS --dynamic";;
esac
#   Debug level?  (integer from 0 to 5)
#   Note that sending SIGUSR1 dynamically raises the debug level
#   of a running nanoprobe, and SIGUSR2 lowers it.
case "${NANOPROBE_DEBUG}" in
    ?*) NANOARGS="$NANOARGS --debug $NANOPROBE_DEBUG";;
esac
#   Where to put our pid file?
case "${NANOPROBE_PIDFILE}" in
    ?*) NANOARGS="$NANOARGS --pidfile $NANOPROBE_PIDFILE";;
esac

#   NANOPROBE_CORELIMIT: What ulimit to give for ulimit -c
case "${NANOPROBE_CORELIMIT}" in
    ?*) ulimit -c "$NANOPROBE_CORELIMIT";;
esac


command=$1
case "$command" in
  start)	$NANOPROBE $NANOARGS
		rc=$?
		if
		  [ $rc -eq 0 ]
		then
		  echo "$SERVICE started on $(uname -n)." >&2
		else
		  echo "$SERVICE NOT started on $(uname -n)!" >&2
		fi
		exit $?;;

  stop)		$NANOPROBE -k $NANOARGS
		rc=$?
		if
		  [ $rc -eq 0 ]
		then
		  echo "$SERVICE stopped on $(uname -n)." >&2
		else
		  echo "$SERVICE NOT stopped on $(uname -n)!" >&2
		fi
		exit $rc;;

  status)	$NANOPROBE -s $NANOARGS
		rc=$?
		case $rc in
		  0)	echo "$SERVICE is running." >&2;;
		  1)	echo "$SERVICE stopped, but /var/run pid file exists." >&2;;
		  2)	echo "$SERVICE stopped, but /var/lock lock file exists." >&2;;
		  3)	echo "$SERVICE not running." >&2;;
		  *)	echo "$SERVICE status unknown." >&2;;
		esac
		exit $rc;;

  restart)	($0 stop && $0 start); exit $?;;

  force-reload) exit 0;;

  *)		echo "$0: Action $command not supported for $SERVICE" >&2
		exit 3;;
esac
