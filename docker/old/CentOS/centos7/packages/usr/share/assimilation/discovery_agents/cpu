#!/bin/sh
#
# Command to discover our local CPU configuration and output the results in JSON
# It requires /proc/cpuinfo and the 'bc' command (although it will work without bc)
# It also pulls a small amount of information from /proc/meminfo as well
#
#
# @author &copy; 2012 - Alan Robertson <alanr@unix.sh>
# @n
# Licensed under the GNU General Public License (GPL) version 3 or any later version at your option.

#
CPUINFO=/proc/cpuinfo
MEMINFO=/proc/meminfo
BC=/usr/bin/bc

# Return true if the argument is a floating point number
isfloating() {
  # We need BC to do this right - but it might not be installed.
  # Our caller has pre-filtered our arguments to likely be floating point numbers
  # Hope we have BC or that's good enough...
  test -x "$BC" || return 0
  test ! -z "$(echo "scale=10; $1" | "$BC" 2>/dev/null)"
}

# Return true if the argument is a number...
isanumber() {
  case "$1" in
    *.*.*|*[A-Za-z]*|*:*)	return 1;;
    [0-9]*.*[0-9*])		isfloating "$1"; return;;
  esac
  test \( "$1" -le 0 \) -o \( "$1" -ge 0 \) 2>/dev/null
}


# Format a scalar in the proper JSON format according to its type
scalarfmt() {
  case "$1" in
      true|false|null)	printf "$1";	return;;
      # We allow yes or no for true and false respectively
      # because /proc uses that notation in some places.
      yes)		printf 'true';	return;;
      no)		printf 'false';	return;;
  esac
  if
    isanumber "$1"
  then
    printf '%s'		"$1"
  else
    printf '"%s"'	"$1"
  fi
}

# Format a bunch of boolean flag names as a JSON 'object' with boolean values
fmtflags() {
    printf '{'
    flagcomma=''
    for arg in "$@"
    do
      printf '%s"%s":true%s' "$flagcomma" "$arg" 
      flagcomma=','
    done
    printf '}'
}

# Discover our CPU info from /proc/cpuinfo (and a little from /proc/meminfo)
discover() {
    proccomma=''
    comma=''
    cat <<-!
	{
	  "discovertype": "cpu",
	  "description": "CPU information",
	  "host": "$(uname -n)",
	  "source": "$0",
	  "data": {
	!
    # Parse /proc/cpuinfo
    (cat $CPUINFO;
     egrep '^(MemTotal|Hugepagesize):' <$MEMINFO | sed 's% kB$%%') | 
    while 
      read line
    do
      case $line in
        processor*)
            proc=$(echo $line | sed -e 's%.*:[	 ]*%"%' -e 's%$%":%')
            printf '%s    %s {\n        ' "$proccomma" "$proc"
            proccomma='
    },
'
            comma=''
            continue;;
        "")	continue;;
      esac
      name=$(echo "$line" | sed -e 's%[	 ]*:.*%%')
      value=$(echo "$line" | sed -e 's%.*:[	 ]*%%')
      # Format "flags" and "power management" as a JSON hash table of boolean-valued names
      case $name in
        flags|"power management")
		printf '%s"%s": %s' "$comma" "$name" "$(fmtflags $value)";;
        *)	printf '%s"%s": %s' "$comma" "$name" "$(scalarfmt "$value")";;
      esac
      comma=',
        '
    done
    printf '\n    }\n  }\n}\n'
}

discover
