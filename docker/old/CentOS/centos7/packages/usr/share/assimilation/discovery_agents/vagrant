#!/bin/sh -eu
# vim: smartindent tabstop=4 shiftwidth=4 expandtab number colorcolumn=80
#
#   'docker' -  Docker discovery script - discovers global docker
#               configuration information and per-container information
#
# This file is part of the Assimilation Project.
#
# Author: Alan Robertson <alanr@unix.sh>
# Copyright (C) 2016 - Assimilation Systems Limited
#
# Free support is available from the Assimilation Project community
#   - http://assimproj.org
# Paid support is available from Assimilation Systems LimitGed
#   - http://assimilationsystems.com
#
# The Assimilation software is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The Assimilation software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the Assimilation Project software.
# If not, see http://www.gnu.org/licenses/
#

# Describe vagrant images as best we can...
# Not sure if we should include non-running images or not...
DIR=$(dirname "$0")
. $DIR/assim_common.sh

vagrant_version() {
    assim_run_in_context vagrant -v 2>/dev/null | sed 's%^[^ ]* %%'
}

# Return the ownership information of the Vagrantfile
vagrant_userinfo() {
    assim_run_in_context ls -ld "$1/Vagrantfile"  | 
    (
        read modebits linkcount uid gid size etc
        printf '"user": "%s", "group": "%s"' "$uid" "$gid"
    )
}

vagrant_discover() {
    (
        set -e
        comma='    '
        assim_run_in_context vagrant global-status 2>/dev/null | \
                grep ' /' | sort -u |
        while
            read id name provider state directory
        do
            STATUS=$(assim_run_in_context sh -c                             \
                    "cd $directory 2>/dev/null && vagrant status || true")
            case $STATUS in
                *' running ('*)     :;;
                *)			        continue;;
            esac
            userinfo=$(vagrant_userinfo "$directory")
            printf '%s"%s": {"name": "%s", "provider": "%s"'    \
                                        "$comma" "$id" "$name" "$provider"
            printf ', "directory": "%s", %s}' "$directory" "$userinfo"
            comma=',
    '
        done
        printf '\n'
    )
}

discover() {
    prefix="    "
    cat <<-!
	{
	  "discovertype": "vagrant",
	  "description": "vagrant running VM information",
	  "host": "$(uname -n)",
	  "source": "$0",
	  "data": {
        "info": {
            "version": "$(vagrant_version)"
        },
        "containers": {
	!
        
    vagrant_discover | sed 's%^%      %'
    printf '    }\n  }\n}\n'
}

discover
