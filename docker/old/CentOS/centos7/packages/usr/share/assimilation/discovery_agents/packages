#!/bin/sh
# vim: smartindent tabstop=4 shiftwidth=4 number expandtab colorcolumn=100
#
# This file is part of the Assimilation Project.
#
# Author: Alan Robertson <alanr@unix.sh>
# Copyright (C) 2013,2014 - Assimilation Systems Limited
#
# Free support is available from the Assimilation Project community - http://assimproj.org
# Paid support is available from Assimilation Systems Limited - http://assimilationsystems.com
#
# The Assimilation software is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The Assimilation software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the Assimilation Project software.  If not, see http://www.gnu.org/licenses/
#
set -e
DIR=$(dirname "$0")
. $DIR/assim_common.sh
PACKAGETYPES="deb_pkgs gem_pkgs npm_pkgs php_pkgs pip_pkgs rpm_pkgs"
PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin
export PATH
ENVIRONMENT=''

tempfile() {
    if
        false and mktemp
    then
        : OK
    else
        name=$(echo /tmp/$$.packages-discovery-$(date --rfc-3339=ns | tr ' ' '_'))
        echo > $name
        echo $name
    fi
}

TMPFILE=$(tempfile)


check_tmpfile() {
    test -s "$TMPFILE" || return 1
    case $(head -n1 $TMPFILE) in
        *[Cc]annot*run*exec*|*executable*file*not*found*|*[Ss]ystem*error*)   return 1;;
    esac
    return 0
}

# Debian Packages
deb_pkgs() {
    comma='
'
    assim_run_in_context dpkg-query --show \
      --showformat='"${package;0}::${architecture;0}":"${version;0}"\n' > $TMPFILE 2>/dev/null 

    check_tmpfile || return 1


    printf '%s"deb":{' "$ourcomma"
    sort -u < $TMPFILE |
    while
        read line
    do
        printf '%s' "${comma}${line}"
        comma=',
'
    done
    printf '}'
    return 0
}

# RPM Packages
rpm_pkgs() {
    assim_run_in_context rpm -qa --queryformat='"%{NAME}::%{ARCH}":"%{VERSION}-%{RELEASE}"\n' \
      > $TMPFILE 2>/dev/null
    check_tmpfile || return 1
    printf '%s"rpm":{' "$ourcomma"
    comma='
'
    sort -u $TMPFILE |
    while
        read line
    do
        printf '%s' "${comma}${line}"
        comma=',
'
    done
    printf '}'
    return 0
}

# Python (pip) Packages
pip_pkgs() {
    assim_run_in_context pip list >$TMPFILE 2>/dev/null
    check_tmpfile || return 1
    printf '%s"pip":{' "$ourcomma"
    comma='
'
    sed -e 's%  *%%' -e 's%^%"%' -e 's%(%": "%' -e 's%)%"%' $TMPFILE |
    while
        read line
    do
      # Work around a pip bug...
        case $line in
            '"Exception:'*) echo '"pip-list-got-an-exception": "0.0.p.s"'
                        break
                        ;;
        esac
        echo "$line"
    done | sort -u |
    while
        read line
    do
        printf '%s%s' "${comma}" "${line}"
        comma=',
'
    done
    printf '\n}'
    return 0
}

# Ruby GEMs
gem_pkgs() {
    assim_run_in_context gem list -q >$TMPFILE 2>/dev/null
    check_tmpfile || return 1
    printf '%s"gem":{' "$ourcomma"
    comma='
'
      sed -e 's%  *%%' -e 's%^%"%' -e 's%(%": "%' -e 's%)%"%' $TMPFILE | sort -u |
    while
        read line
    do
        printf '%s%s' "${comma}" "${line}"
        comma=',
'
    done
    printf '\n}'
    return 0
}

#
#   Node.js commonly has several versions of a given package loaded...
#   so we add a suffix onto the later versions...
#
npm_pkgs(){
    assim_run_in_context npm -g ls >$TMPFILE 2>/dev/null
    check_tmpfile || return 1
    printf '%s"npm":{' "$ourcomma"
    comma='
'
    sed -e 's%[^A-Za-z_]* %%' -e 's%@%	%' $TMPFILE | sort -u | (
    seq=1
    prevpkg=NOSUCHPACKAGE
    while
        read package version
    do
        test -z "$version"  && continue
        if
            [ "X$package" != "X$prevpkg" ]
        then
            seq=1
            printf '%s"%s": "%s"' "${comma}" "${package}" "$version"
        else
            seq=$(expr $seq + 1)
            printf '%s"%s#%d": "%s"' "${comma}" "${package}" "$seq" "$version"
        fi
        prevpkg=$package
        comma=',
'
    done)
    printf '\n}'
    return 0
}

# PHP packages
php_pkgs() {
    assim_run_in_context php  -r \
        'foreach (get_loaded_extensions() as $extension) echo "\"$extension\": " . "\"" . phpversion($extension) . "\"\n";'     \
      >$TMPFILE 2>/dev/null
    check_tmpfile || return 1
    printf '%s"php":{' "$ourcomma"
    comma='
'
    sort -u $TMPFILE |
    while
        read line
    do
        case $line in
            *'""'*)     continue;;
            *)          : OK ;;
        esac
        printf '%s%s' "${comma}" "${line}"
        comma=',
'
    done
    printf '\n}'
    return 0
}

# Discover all our packages in our current environment (default OS)
discover_packages_basic() {
    ourcomma=''
    for pkgtype in $PACKAGETYPES
    do
        if 
            $pkgtype "$ourcomma"
        then
            ourcomma=",
"
        fi
    done
}

discover() {
    HOST=$(uname -n)
    PKGSTR=$(echo $PACKAGETYPES | sed -e 's%_pkgs%%g' -e 's% %", "%g' -e 's%^%["%' -e 's%$%"]%')
    cat <<-!
	{
	  "discovertype": "packages",
	  "description": "Installed package information",
	  "packagetypes": $PKGSTR,
	  "host": "${HOST}",
	  "proxy": "${ASSIM_PROXY_PATH}",
	  "source": "$0",
	  "data": {
	!
    ourcomma=""
    # Maybe one day I'll look at Perl - the complete answer is quite slow,
    # and requires installing a package not otherwise required.
    #
    # For Java it would probably have to be a separate discovery method since there is no central
    # repository for JARs like other languages have.
    # For that case, we could trigger discovery based on Java programs talking on the network
    # like we do for collecting checksums.
    case $ENVIRONMENT in
        docker) case $ASSIM_LOCAL_PROXY_DEST in
                    ?*) discover_packages_basic;;
                    *)  discover_docker;;
                esac;;
        *)  discover_packages_basic;;
    esac
    echo "}}"
}
discover
